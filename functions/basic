#!/bin/bash

source "$BASE_DIR"/functions/log

change_to_dir() {

    local dir=$1

    mkdir -p "$dir" && cd "$dir"

}

change_to_repo() {

    local repo=$1
    
    change_to_dir "$GITHUB_PROJECTS_DIR"/$repo
}

load_config() {

    local config=$BASE_DIR/config

    [ -f "$config" ] || config=$config.sample
    source "$config"

}

configure_sudoers() {

    echo "TODO: configure_sudoers"

}

distro_name() {

    if ! [ `uname` = Linux ]
    then
        echo "not Linux"
        return
    fi

    if ! which lsb_release &> /dev/null
    then
        if which apt-get &> /dev/null
        then
            sudo apt-get -y install lsb_release
        elif which dnf &> /dev/null
        then
            sudo dnf -y install redhat-lsb-core
        elif which yum &> /dev/null
        then
            sudo yum -y install redhat-lsb-core
        else
            echo "unknow Linux"
            return
        fi
    fi
    lsb_release -i | cut -d: -f2 | xargs | tr '[:upper:]' '[:lower:]'

}

packages_install() {

    linux_packages_install() {

        local packages_file=$BASE_DIR/linux/$1/packages.config
        local packages

        [ -f "$packages_file" ] || packages_file=$packages_file.sample

        if ! [ -f "$packages_file" ]
        then
            warning "Packages file ($packages_file) not configured!"
            return
        else
            packages=$(cat "$packages_file")
        fi

        local package
        for package in ${packages[*]}
        do
            package_install $package
        done

    }

    case `uname` in
        Linux)
            local distro_name=`distro_name`
            case "$distro_name" in
                ubuntu|fedora|rhel)
                    linux_packages_install $distro_name
                    ;;
                *)
                    echo "I can not install packages in \"$distro_name\"!"
                    ;;
            esac
            ;;
        Darwin)
            info "Installing Homebrew packages ..."
            ;;
    esac

}

dotfiles_install() {

    if ! [ "$DOTFILES_REPO" ]
    then
       warning 'DOTFILES_REPO not installed!'
       return
    fi

    github_clone_repo $DOTFILES_REPO
    "$GITHUB_PROJECTS_DIR"/$DOTFILES_REPO/install

}

sdkman_install() {

    info "Installing sdkman ..."
    curl -s "https://get.sdkman.io" | bash

    source ~/.sdkman/bin/sdkman-init.sh

    $JAVA_INSTALL && { yes | sdk install java 8u151-oracle; }
    $MAVEN_INSTALL && sdk install maven
    $GRADLE_INSTALL && sdk install gradle

}

github_clone_repo() {

    local repo=$1
    local repo_url=https://github.com/$repo
    local owner_dir=$GITHUB_PROJECTS_DIR/`dirname "$repo"`

    mkdir -p $owner_dir
    pushd $owner_dir > /dev/null
    git clone $repo_url
    popd > /dev/null

}

package_install() {

    local distro_name=`distro_name`

    case "$distro_name" in
        fedora)
            sudo dnf -y install $1
            ;;
        ubuntu)
            sudo apt-get -y install $1
            ;;
        rhel)
            sudo yum -y install install $1
            ;;
        *)
            echo "I don't know how to install $1 in $distro_name!"
            return 1
            ;;
    esac

}
